{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenido a menuti.js MenutiJS es un peque\u00f1o plugin de JQuery utilizado para generar menus de navegaci\u00f3n responsive de forma facil y c\u00f3moda utilizando la libreria JQuery. Stable Version: 0.1.11 Uso Para usar este pluging es necesario cargar la libreria JQuery ya que es un pluging de esta. Solo con copiar el siguiente fragmento de c\u00f3digo dentro de la etiqueta head de tu archivo .html deber\u00eda de ser necesario: !--Libreria JQuery-- script type= text/javascript src= https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.js /script !--Jquery.menuti.js-- script type= text/javascript src= ./js/jquery.menuti.js /script *Recuerda que el archivo jquery.menuti.js debe estar colocado en el directorio correcto. Si deseas que tu archivo cuelgue de un directorio distinto solo debes cambiar la ruta en el atributo \"src\" dentro de la etiqueta script","title":"Introduction"},{"location":"#bienvenido-a-menutijs","text":"MenutiJS es un peque\u00f1o plugin de JQuery utilizado para generar menus de navegaci\u00f3n responsive de forma facil y c\u00f3moda utilizando la libreria JQuery. Stable Version: 0.1.11","title":"Bienvenido a menuti.js"},{"location":"#uso","text":"Para usar este pluging es necesario cargar la libreria JQuery ya que es un pluging de esta. Solo con copiar el siguiente fragmento de c\u00f3digo dentro de la etiqueta head de tu archivo .html deber\u00eda de ser necesario: !--Libreria JQuery-- script type= text/javascript src= https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.js /script !--Jquery.menuti.js-- script type= text/javascript src= ./js/jquery.menuti.js /script *Recuerda que el archivo jquery.menuti.js debe estar colocado en el directorio correcto. Si deseas que tu archivo cuelgue de un directorio distinto solo debes cambiar la ruta en el atributo \"src\" dentro de la etiqueta script","title":"Uso"},{"location":"style-guide/","text":"Guia de estilo Esto es una peque\u00f1a gu\u00eda, para facilitar a los dise\u00f1adores que busquen personalizar el men\u00fa generado por Menuti.js. Menuti.js es compatible con .css y bootstrap, en los siguientes puntos se explicar\u00e1 su utilizaci\u00f3n. CSS Es la parte m\u00e1s f\u00e1cil, ya que se detallar\u00e1n las clases y los ids que Menuti.js genera en el archivo .html para ello solo deber\u00e1s configurarlas en tu archivo .css o en la etiqueta style dentro de tu archivo .html. Opci\u00f3n responsive Si elegimos esta opci\u00f3n Menuti.js generar\u00e1 una serie de elementos: input type= checkbox id= check label class= icon-menu for= check /label nav id= menu class= menu ul /ul /nav addSection y addSubsection Cuando se a\u00f1ade una secci\u00f3n se genera el siguiente codigo: li id= home a href= # span /span HOME /a /li Bootstrap Esta opci\u00f3n es un poco m\u00e1s complicada ya que para ello necesitaremos algo de conocimientos en JQuery. En un primer momento deberemos a\u00f1adir Bootstrap a nuestro proyecto, si no sabes como hacerlo puedes visitar el siguiente link que te redirecionar\u00e1 a la p\u00e1gina de documentacion de Bootstrap. Bootstrap-Documentation Una vez realizado este paso necesitaremos a\u00f1adir las clases de bootstrap a los elementos que deseemos. A continuaci\u00f3n un ejemplo de como deberiamos de realizar esta acci\u00f3n: $( nav ).addClass( navbar navbar-dark bg-dark );","title":"Style Guide"},{"location":"style-guide/#guia-de-estilo","text":"Esto es una peque\u00f1a gu\u00eda, para facilitar a los dise\u00f1adores que busquen personalizar el men\u00fa generado por Menuti.js. Menuti.js es compatible con .css y bootstrap, en los siguientes puntos se explicar\u00e1 su utilizaci\u00f3n.","title":"Guia de estilo"},{"location":"style-guide/#css","text":"Es la parte m\u00e1s f\u00e1cil, ya que se detallar\u00e1n las clases y los ids que Menuti.js genera en el archivo .html para ello solo deber\u00e1s configurarlas en tu archivo .css o en la etiqueta style dentro de tu archivo .html.","title":"CSS"},{"location":"style-guide/#opcion-responsive","text":"Si elegimos esta opci\u00f3n Menuti.js generar\u00e1 una serie de elementos: input type= checkbox id= check label class= icon-menu for= check /label nav id= menu class= menu ul /ul /nav","title":"Opci\u00f3n responsive"},{"location":"style-guide/#addsection-y-addsubsection","text":"Cuando se a\u00f1ade una secci\u00f3n se genera el siguiente codigo: li id= home a href= # span /span HOME /a /li","title":"addSection y addSubsection"},{"location":"style-guide/#bootstrap","text":"Esta opci\u00f3n es un poco m\u00e1s complicada ya que para ello necesitaremos algo de conocimientos en JQuery. En un primer momento deberemos a\u00f1adir Bootstrap a nuestro proyecto, si no sabes como hacerlo puedes visitar el siguiente link que te redirecionar\u00e1 a la p\u00e1gina de documentacion de Bootstrap. Bootstrap-Documentation Una vez realizado este paso necesitaremos a\u00f1adir las clases de bootstrap a los elementos que deseemos. A continuaci\u00f3n un ejemplo de como deberiamos de realizar esta acci\u00f3n: $( nav ).addClass( navbar navbar-dark bg-dark );","title":"Bootstrap"},{"location":"user-guide/","text":"Gu\u00eda de usuario Gu\u00eda r\u00e1pida para comenzar a usar Menuti.js Cargar Menuti.js en nuestro script Carga menuti.js dentro de tu script utilizando la funcion $().menuti('init') . !--Example code-- script type= text/javascript $(document).ready(function () { $().menuti('init'); }); /script Por defecto menuti.js inyectara el codigo html dentro de un div con id \"content-menu\". Por ello es necesario crear previamente detro de nuestro archivo .html un elemento div con id=\"content-menu\". div id=\"content-menu\" /div A continuacion se muestra un peque\u00f1o fragmento de c\u00f3digo a modo de ejemplo: body header div id= content-menu class= content-menu /div /header /body Aunque tambi\u00e9n puedes colocar los menus donde lo necesites, siempre y cuando previamente modifiques el contenido dentro de tu archivo .html y luego indiques por parametros a la funci\u00f3n init donde deseas crear tu men\u00fa. A continuaci\u00f3n se muestra un ejemplo de como realizarlo. !--Archivo html-- body header div id= example-container /div /header /body //Archivo js //Variable de configuraci\u00f3n var initSettings = { menuID : example-container }; $().menuti('init', initSettings); M\u00e9todos y utilizaci\u00f3n. init Este m\u00e9todo inicia menuti.js y deja todo preparado para que podamos a\u00f1adir secciones a nuestro men\u00fa. Cuenta con dos par\u00e1metros que podremos a\u00f1adir a la variable settings. responsive Este par\u00e1metro nos permitir\u00e1 la creaci\u00f3n de un responsivo. Cuenta con dos valores: true por defecto, o false en el caso que no queramos que nuestro men\u00fa se comporte de forma responsiva. menuID Este par\u00e1metro se utiliza para indicar donde queremos colocar nuestro men\u00fa. *Recuerda que deberemos colocar nuestro men\u00fa dentro de etiquetas div y su id ser\u00e1 el valor que hemos pasado por par\u00e1metro. Por defecto el valor de menuID es \"content-menu\". //Archivo js //Variable de configuraci\u00f3n var initSettings = { responsive: false, menuID : example-container }; $().menuti('init', initSettings); addSection Este es el m\u00e9todo utilizado para agregar secciones a nuestro men\u00fa. Cuenta con dos claves que podemos a\u00f1adir a nuestra variable settings. elements Esta clave es un array en el que a\u00f1adiremos todos los elementos de nuestro men\u00fa. Cuando nuestro men\u00fa est\u00e9 creado el id de cada elemento ser\u00e1 el mismo aunque en min\u00fasculas y con los espacios omitidos. position Sirve para indicar a nuestro pluging donde queremos a\u00f1adir nuestro men\u00fa si antes o despues. Este parametro podr\u00eda sernos \u00fatil si en un futuro queremos a\u00f1adir mas elementos a nuestro men\u00fa por lo que podremos elegir su posici\u00f3n. Los dos parametros posibles son los siguientes after (por defecto) o before . //Archivo js //Variable de configuraci\u00f3n var addSectionSettings = { elements : [ INICIO , SERVICIO , PRODUCTOS , BLOG , CONTACTOS ], position : after , }; $().menuti('addSection', addSectionSettings); delSection Este m\u00e9todo sirve para eliminar secciones y subsecciones. Para utilizar este m\u00e9todo es necesario pasarle por parametro el id del elemento li que queremos eliminar. //Archivo js //Variable de configuraci\u00f3n $().menuti('delSection', 'li_id'); addSubsection Este m\u00e9todo a\u00f1adir\u00e1 una o varias subseccion/es al elemento que queramos, para ello deberemos pasar a la variable de configuraci\u00f3n el elemento padre al que le deseamos agregar subsecciones y dichas subsecciones. Adem\u00e1s podemos elegir la posici\u00f3n donde deseamos agregar los elementos. Las tres claves que debemos a\u00f1adir a nuestra variable de configuraci\u00f3n ser\u00e1 las siguientes. father En esta clave deberemos colocar el \"id\" del elemento del men\u00fa al que le deseamos a\u00f1adir nuestro submen\u00fa. Si no existe la p\u00e1gina mostrar\u00e1 un mensaje de error indicando que ese elemento no se encuentra dentro del DOM. elements Esta clave es un array en el que a\u00f1adiremos todos los elementos de nuestro submen\u00fa. Cuando nuestro submen\u00fa est\u00e9 creado el id de cada elemento ser\u00e1 el mismo aunque en min\u00fasculas y con los espacios omitidos. position Sirve para indicar a nuestro pluging donde queremos a\u00f1adir nuestro submen\u00fa, si antes o despues. Este parametro podr\u00eda ser \u00fatil si en un futuro queremos a\u00f1adir m\u00e1s elementos a nuestro submen\u00fa por lo que podremos elegir su posici\u00f3n dentro del men\u00fa. Los dos parametros posibles son los siguientes after (por defecto) o before . //Archivo js //Variable de configuraci\u00f3n var addSubsectionSettings = { father : servicio , elements : [ Vehiculos de ocasi\u00f3n , Renting , Nuevos modelos ], position : after , }; $().menuti('addSubsection', addSubsectionSettings); addLogo Este m\u00e9todo sirve para a\u00f1adir un logo a nuestro men\u00fa (si lo deseamos), para ello solo necesitaremos pasar por parametros la ruta del archivo img que deseamos colocar. //Archivo js $().menuti('addLogo', ./img/logo.jpg ); addTitle Este m\u00e9todo sirve para a\u00f1adir un t\u00edtulo a nuestro men\u00fa (si lo deseamos), para ello solo necesitaremos pasar por parametros el t\u00edtulo que deseamos para nuestro documento. *El titulo ser\u00e1 un h2 . //Archivo js $().menuti('addTitle', Empresa S.L. ); addIcon Con este m\u00e9todo podemos a\u00f1adir iconos a los elementos de nuestro menu. Para ello, antes necesitaremos tener en nuestro proyecto alg\u00fan archivo .css de iconos (como por ejemplo fontello). Este m\u00e9todo necesita dos parametros, el primero ser\u00eda el \"id\" del elemento al que le queremos a\u00f1adir el icono, el segundo la clase de dicho icono. * Hay que recordar que la clase del icono debe coincidir con la clase del archivo .css de iconos que hemos a\u00f1adido a nuestro proyecto. //Archivo js $().menuti('addIcon', home , icon-home );","title":"User Guide"},{"location":"user-guide/#guia-de-usuario","text":"Gu\u00eda r\u00e1pida para comenzar a usar Menuti.js","title":"Gu\u00eda de usuario"},{"location":"user-guide/#cargar-menutijs-en-nuestro-script","text":"Carga menuti.js dentro de tu script utilizando la funcion $().menuti('init') . !--Example code-- script type= text/javascript $(document).ready(function () { $().menuti('init'); }); /script Por defecto menuti.js inyectara el codigo html dentro de un div con id \"content-menu\". Por ello es necesario crear previamente detro de nuestro archivo .html un elemento div con id=\"content-menu\". div id=\"content-menu\" /div A continuacion se muestra un peque\u00f1o fragmento de c\u00f3digo a modo de ejemplo: body header div id= content-menu class= content-menu /div /header /body Aunque tambi\u00e9n puedes colocar los menus donde lo necesites, siempre y cuando previamente modifiques el contenido dentro de tu archivo .html y luego indiques por parametros a la funci\u00f3n init donde deseas crear tu men\u00fa. A continuaci\u00f3n se muestra un ejemplo de como realizarlo. !--Archivo html-- body header div id= example-container /div /header /body //Archivo js //Variable de configuraci\u00f3n var initSettings = { menuID : example-container }; $().menuti('init', initSettings);","title":"Cargar Menuti.js en nuestro script"},{"location":"user-guide/#metodos-y-utilizacion","text":"","title":"M\u00e9todos y utilizaci\u00f3n."},{"location":"user-guide/#init","text":"Este m\u00e9todo inicia menuti.js y deja todo preparado para que podamos a\u00f1adir secciones a nuestro men\u00fa. Cuenta con dos par\u00e1metros que podremos a\u00f1adir a la variable settings. responsive Este par\u00e1metro nos permitir\u00e1 la creaci\u00f3n de un responsivo. Cuenta con dos valores: true por defecto, o false en el caso que no queramos que nuestro men\u00fa se comporte de forma responsiva. menuID Este par\u00e1metro se utiliza para indicar donde queremos colocar nuestro men\u00fa. *Recuerda que deberemos colocar nuestro men\u00fa dentro de etiquetas div y su id ser\u00e1 el valor que hemos pasado por par\u00e1metro. Por defecto el valor de menuID es \"content-menu\". //Archivo js //Variable de configuraci\u00f3n var initSettings = { responsive: false, menuID : example-container }; $().menuti('init', initSettings);","title":"init"},{"location":"user-guide/#addsection","text":"Este es el m\u00e9todo utilizado para agregar secciones a nuestro men\u00fa. Cuenta con dos claves que podemos a\u00f1adir a nuestra variable settings. elements Esta clave es un array en el que a\u00f1adiremos todos los elementos de nuestro men\u00fa. Cuando nuestro men\u00fa est\u00e9 creado el id de cada elemento ser\u00e1 el mismo aunque en min\u00fasculas y con los espacios omitidos. position Sirve para indicar a nuestro pluging donde queremos a\u00f1adir nuestro men\u00fa si antes o despues. Este parametro podr\u00eda sernos \u00fatil si en un futuro queremos a\u00f1adir mas elementos a nuestro men\u00fa por lo que podremos elegir su posici\u00f3n. Los dos parametros posibles son los siguientes after (por defecto) o before . //Archivo js //Variable de configuraci\u00f3n var addSectionSettings = { elements : [ INICIO , SERVICIO , PRODUCTOS , BLOG , CONTACTOS ], position : after , }; $().menuti('addSection', addSectionSettings);","title":"addSection"},{"location":"user-guide/#delsection","text":"Este m\u00e9todo sirve para eliminar secciones y subsecciones. Para utilizar este m\u00e9todo es necesario pasarle por parametro el id del elemento li que queremos eliminar. //Archivo js //Variable de configuraci\u00f3n $().menuti('delSection', 'li_id');","title":"delSection"},{"location":"user-guide/#addsubsection","text":"Este m\u00e9todo a\u00f1adir\u00e1 una o varias subseccion/es al elemento que queramos, para ello deberemos pasar a la variable de configuraci\u00f3n el elemento padre al que le deseamos agregar subsecciones y dichas subsecciones. Adem\u00e1s podemos elegir la posici\u00f3n donde deseamos agregar los elementos. Las tres claves que debemos a\u00f1adir a nuestra variable de configuraci\u00f3n ser\u00e1 las siguientes. father En esta clave deberemos colocar el \"id\" del elemento del men\u00fa al que le deseamos a\u00f1adir nuestro submen\u00fa. Si no existe la p\u00e1gina mostrar\u00e1 un mensaje de error indicando que ese elemento no se encuentra dentro del DOM. elements Esta clave es un array en el que a\u00f1adiremos todos los elementos de nuestro submen\u00fa. Cuando nuestro submen\u00fa est\u00e9 creado el id de cada elemento ser\u00e1 el mismo aunque en min\u00fasculas y con los espacios omitidos. position Sirve para indicar a nuestro pluging donde queremos a\u00f1adir nuestro submen\u00fa, si antes o despues. Este parametro podr\u00eda ser \u00fatil si en un futuro queremos a\u00f1adir m\u00e1s elementos a nuestro submen\u00fa por lo que podremos elegir su posici\u00f3n dentro del men\u00fa. Los dos parametros posibles son los siguientes after (por defecto) o before . //Archivo js //Variable de configuraci\u00f3n var addSubsectionSettings = { father : servicio , elements : [ Vehiculos de ocasi\u00f3n , Renting , Nuevos modelos ], position : after , }; $().menuti('addSubsection', addSubsectionSettings);","title":"addSubsection"},{"location":"user-guide/#addlogo","text":"Este m\u00e9todo sirve para a\u00f1adir un logo a nuestro men\u00fa (si lo deseamos), para ello solo necesitaremos pasar por parametros la ruta del archivo img que deseamos colocar. //Archivo js $().menuti('addLogo', ./img/logo.jpg );","title":"addLogo"},{"location":"user-guide/#addtitle","text":"Este m\u00e9todo sirve para a\u00f1adir un t\u00edtulo a nuestro men\u00fa (si lo deseamos), para ello solo necesitaremos pasar por parametros el t\u00edtulo que deseamos para nuestro documento. *El titulo ser\u00e1 un h2 . //Archivo js $().menuti('addTitle', Empresa S.L. );","title":"addTitle"},{"location":"user-guide/#addicon","text":"Con este m\u00e9todo podemos a\u00f1adir iconos a los elementos de nuestro menu. Para ello, antes necesitaremos tener en nuestro proyecto alg\u00fan archivo .css de iconos (como por ejemplo fontello). Este m\u00e9todo necesita dos parametros, el primero ser\u00eda el \"id\" del elemento al que le queremos a\u00f1adir el icono, el segundo la clase de dicho icono. * Hay que recordar que la clase del icono debe coincidir con la clase del archivo .css de iconos que hemos a\u00f1adido a nuestro proyecto. //Archivo js $().menuti('addIcon', home , icon-home );","title":"addIcon"}]}